@page "/";
@using Microsoft.PowerFx;
@using Microsoft.PowerFx.Core.Utils;
@using Microsoft.PowerFx.Syntax;
@using Microsoft.PowerFx.Types;
@using PowerFxWasm.Commons;
@using PowerFxWasm.Model;
@using System.Text.Json;
@using System.Text.Json.Serialization;

@*<h1>Hello, world!</h1>

<div>
	<h3>Context</h3>
	<p>This is a JSON object whose properties become 'globals' in the Power Fx expression below.</p>
	<textarea
		style="
          width: 'calc(100% - 6px)';
          height: 100;
          border: '1px solid grey';
        "
		@bind="context"></textarea>
	<h3>Formula</h3>
	<p>This is a Power Fx expression</p>
	<textarea
		style="
          width: 'calc(100% - 6px)';
          height: 100;
          border: '1px solid grey';
        "
		@bind="expression"></textarea>
</div>
<button class="btn btn-primary" @onclick="Evaluate">Click me</button>

<h2> Evaluation </h2>
<textarea
	style="
		  width: 'calc(100% - 6px)';
		  height: 100;
		  border: '1px solid grey';
	"
	@bind="evaluation"
		  disabled="disabled"></textarea>*@


@code {

	//var context = "{\"A\":\"ABC\",\"B\":{\"Inner\":123}}";
	//var expression = "Concatenate(A, B.Inner, 1+3)";
	//private string? context = "{\"A\":\"ABC\",\"B\":{\"Inner\":123}}";
	//private string? expression = "Concatenate(A, B.Inner, 1+3)";
	//private string? evaluation;
	//private async Task Evaluate()
	//{
	//	var jsonSerializerOptions = new JsonSerializerOptions
	//		{
	//			WriteIndented = true,
	//			Converters =
	//			{
	//				new JsonStringEnumConverter(JsonNamingPolicy.CamelCase),
	//				new NodeConverter<TexlNode>(),
	//				new NodeConverter<VariadicOpNode>(),
	//				new NodeConverter<ListNode>(),
	//				new NodeConverter<CallNode>(),
	//				new NodeConverter<Identifier>(),
	//				new NodeConverter<DName>()

	//			}
	//		};
	//	IReadOnlyList<Token> tokens = null;
	//	CheckResult check = null;
	//	var cts = new CancellationTokenSource();
	//	var _timeout = TimeSpan.FromSeconds(2);
	//	cts.CancelAfter(_timeout);
	//	try
	//	{
	//		var engine = new PowerFxScopeFactory().GetEngine();

	//		var context = this.context;
	//		var expression = this.expression;

	//		var parameters = (RecordValue)FormulaValue.FromJson(context);

	//		if (parameters == null)
	//		{
	//			parameters = RecordValue.Empty();
	//		}

	//		tokens = engine.Tokenize(expression);
	//		check = engine.Check(expression, parameters.Type, options: null);
	//		check.ThrowOnErrors();
	//		var eval = check.GetEvaluator();
	//		var result = await eval.EvalAsync(cts.Token, parameters);
	//		var resultString = PowerFxHelper.TestToString(result);
	//		this.evaluation = resultString;
	//		//return StatusCode(200, new
	//		//{
	//		//    result = resultString,
	//		//    tokens = tokens,
	//		//    parse = JsonSerializer.Serialize(check.Parse.Root, _jsonSerializerOptions)
	//		//});
	//	}
	//	catch (Exception ex)
	//	{
	//		//return StatusCode(200, new
	//		//{
	//		//    error = ex.Message,
	//		//    tokens = tokens,
	//		//    parse = JsonSerializer.Serialize(check.Parse.Root, _jsonSerializerOptions)
	//		//});
	//	}
	//	finally
	//	{
	//		cts.Dispose();
	//	}
	//}
}